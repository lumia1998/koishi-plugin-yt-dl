/// <reference types="node" />
/// <reference types="node" />
import { Context, Service } from 'koishi';
import { Readable } from 'stream';
declare module 'koishi' {
    interface Context {
        ffmpeg: FFmpeg;
    }
}
interface RunReturn {
    file: Promise<void>;
    buffer: Promise<Buffer>;
    info: Promise<Buffer>;
    stream: Readable;
}
export declare class FFmpegBuilder {
    executable: string;
    _input: string | Buffer | Readable;
    inputOptions: string[];
    outputOptions: string[];
    constructor(executable: string);
    input(path: string): FFmpegBuilder;
    input(buffer: Buffer): FFmpegBuilder;
    input(stream: Readable): FFmpegBuilder;
    inputOption(...option: string[]): FFmpegBuilder;
    outputOption(...option: string[]): FFmpegBuilder;
    run<T extends keyof RunReturn>(type: T, path?: string): RunReturn[T];
}
export declare class FFmpeg extends Service {
    executable: string;
    constructor(ctx: Context, executable: string);
    builder(): FFmpegBuilder;
}
export {};
