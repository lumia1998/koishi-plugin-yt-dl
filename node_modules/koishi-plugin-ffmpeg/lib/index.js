"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apply = exports.inject = exports.Config = exports.name = void 0;
const koishi_1 = require("koishi");
const os = __importStar(require("os"));
const get_registry_1 = __importDefault(require("get-registry"));
const ffmpeg_1 = require("./ffmpeg");
__exportStar(require("./ffmpeg"), exports);
const platform = os.platform();
const arch = os.arch();
exports.name = 'ffmpeg';
exports.Config = koishi_1.Schema.object({});
exports.inject = ['downloads'];
async function apply(ctx) {
    const task = ctx.downloads.nereid('ffmpeg', [
        `npm://@koishijs-assets/ffmpeg?registry=${await (0, get_registry_1.default)()}`
    ], bucket());
    const path = await task.promise;
    const executable = platform === 'win32' ? `${path}/ffmpeg.exe` : `${path}/ffmpeg`;
    ctx.plugin(ffmpeg_1.FFmpeg, executable);
}
exports.apply = apply;
function bucket() {
    let bucket = 'ffmpeg-';
    switch (platform) {
        case 'win32':
            bucket += 'windows-';
            break;
        case 'linux':
            bucket += 'linux-';
            break;
        case 'darwin':
            bucket += 'macos-';
            break;
        default:
            throw new Error('unsupported platform');
    }
    switch (arch) {
        case 'arm':
            bucket += 'armel';
            break;
        case 'arm64':
            bucket += 'arm64';
            break;
        case 'x86':
            bucket += 'i686';
            break;
        case 'x64':
            bucket += 'amd64';
            break;
        default:
            throw new Error('unsupported arch');
    }
    return bucket;
}
